@model SimpleDailyJournal.ViewModels.DateRangeViewModel

<h2>Analyze Sentiments</h2>

<div class="form-group">
    <label for="presetRanges">Select a Date Range for analysis: </label>
    <div id="presetRanges" class="btn btn-group mb-1" role="group">
        <button type="button" class="btn btn-outline-primary" onclick="setDateRange(7)">Last 7 Days</button>
        <button type="button" class="btn btn-outline-primary" onclick="setDateRange(30)">Last 30 Days</button>
        <button type="button" class="btn btn-outline-primary" onclick="setDateRange(90)">Last 90 Days</button>
    </div>
</div>

<form asp-action="PerformAnalysis" method="post">
    <div class="form-group">
        <label for="startDate">Start Date</label>
        <input id="startDate" type="date" class="form-control" asp-for="StartDate"/>
    </div>


    <div class="form-group">
        <label for="endDate">End Date</label>
        <input id="endDate" type="date" class="form-control" asp-for="EndDate"/>
    </div>

    <div class="form-group">
        <label for="MoodFilter">Filter by Mood</label>
        <select id="MoodFilter" class="form-control" asp-for="SelectedMood" asp-items="Html.GetEnumSelectList<MoodType>()">
            <option value="">All Moods</option> <!-- Default option, others come from asp-items above -->
        </select>
    </div>

    <button class="btn btn-primary mt-3" type="button" onclick="fetchSentimentData()">Analyze</button>
</form>

<!-- Quick and easy client side date filtering using JS -->
<script>
    function setDateRange(days) {
        // get today's date
        const today = new Date();
        
        // calculate the start date based on the range
        const startDate = new Date();
        startDate.setDate(today.getDate() - days);
        
        // format dates to 'YYYY-MM-DD' format
        const formatDate = (date) => date.toISOString().split('T')[0];
        
        // set values for the date inputs
        document.getElementById('startDate').value = formatDate(startDate);
        document.getElementById('endDate').value = formatDate(today);
        
        // also, reset the mood selection filter to "All Moods"
        document.getElementById('MoodFilter').value = "";
    }

    async function fetchSentimentData() {
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        const selectedMood = document.getElementById('MoodFilter').value;

        if (!startDate || !endDate) {
            alert('Please select a valid date range!');
            return;
        }

        if (new Date(startDate) > new Date(endDate)) {
            alert('Start date cannot be later than end date!');
            return;
        }

        const url = `/JournalEntries/GetSentimentTrends?startDate=${startDate}&endDate=${endDate}${selectedMood ? `&selectedMood=${selectedMood}` : ''}`;

        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json(); // Process the JSON here
            console.log('Received data:', data);
            localStorage.setItem('sentimentTrends', JSON.stringify(data.sentimentTrends || []));
            localStorage.setItem('moodDistribution', JSON.stringify(data.moodDistribution || {}));
            window.location.href = '/JournalEntries/AnalysisResult';
        } catch (error) {
            console.error('Error fetching Sentiment Trends:', error);
            alert('An error occurred while fetching sentiment data. Please try again later.');
        }
    }
</script>